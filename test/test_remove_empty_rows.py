
# Generated by CodiumAI

from xml_pretifier import remove_empty_rows

import pytest

class TestRemoveEmptyRows:

    #  Successfully removes empty rows from XML files in the specified directory
    def test_remove_empty_rows_success(self, tmp_path):
        import os
        import xml.etree.ElementTree as ET
        from remove_empty_rows import remove_empty_rows

        # Setup
        xml_content = '''<root><worksheet><row><cell>data</cell></row><row></row></worksheet></root>'''
        file_path = tmp_path / "test.xml"
        file_path.write_text(xml_content)

        # Execute
        remove_empty_rows(tmp_path)

        # Verify
        tree = ET.parse(file_path)
        root = tree.getroot()
        rows = root.findall('.//row')
        assert len(rows) == 1

    #  Correctly identifies and processes all XML files within nested subdirectories
    def test_process_nested_subdirectories(self, tmp_path):
        import os
        import xml.etree.ElementTree as ET
        from remove_empty_rows import remove_empty_rows

        # Setup
        nested_dir = tmp_path / "nested"
        nested_dir.mkdir()
        xml_content = '''<root><worksheet><row></row></worksheet></root>'''
        file_path = nested_dir / "test.xml"
        file_path.write_text(xml_content)

        # Execute
        remove_empty_rows(tmp_path)

        # Verify
        tree = ET.parse(file_path)
        root = tree.getroot()
        rows = root.findall('.//row')
        assert len(rows) == 0

    #  Properly saves the modified XML files after removing empty rows
    def test_save_modified_files(self, tmp_path):
        import os
        import xml.etree.ElementTree as ET
        from remove_empty_rows import remove_empty_rows

        # Setup
        xml_content = '''<root><worksheet><row></row></worksheet></root>'''
        file_path = tmp_path / "test.xml"
        file_path.write_text(xml_content)

        # Execute
        remove_empty_rows(tmp_path)

        # Verify
        tree = ET.parse(file_path)
        root = tree.getroot()
        rows = root.findall('.//row')
        assert len(rows) == 0

    #  Handles directories with a mix of XML and non-XML files without errors
    def test_handle_mixed_files(self, tmp_path):
        import os
        import xml.etree.ElementTree as ET
        from remove_empty_rows import remove_empty_rows

        # Setup
        xml_content = '''<root><worksheet><row></row></worksheet></root>'''
        xml_file_path = tmp_path / "test.xml"
        xml_file_path.write_text(xml_content)
    
        non_xml_file_path = tmp_path / "test.txt"
        non_xml_file_path.write_text("This is a text file.")

        # Execute
        remove_empty_rows(tmp_path)

        # Verify
        tree = ET.parse(xml_file_path)
        root = tree.getroot()
        rows = root.findall('.//row')
        assert len(rows) == 0

    #  Directory contains no XML files
    def test_no_xml_files_in_directory(self, tmp_path):
        from remove_empty_rows import remove_empty_rows

        # Setup - No XML files in directory

        # Execute and Verify - Should not raise any exceptions
        try:
            remove_empty_rows(tmp_path)
            assert True
        except Exception:
            assert False

    #  XML files with no <worksheet> elements
    def test_no_worksheet_elements(self, tmp_path):
        import os
        import xml.etree.ElementTree as ET
        from remove_empty_rows import remove_empty_rows

        # Setup
        xml_content = '''<root><row></row></root>'''
        file_path = tmp_path / "test.xml"
        file_path.write_text(xml_content)

        # Execute and Verify - Should not raise any exceptions and file should remain unchanged
        try:
            remove_empty_rows(tmp_path)
            tree = ET.parse(file_path)
            root = tree.getroot()
            rows = root.findall('.//row')
            assert len(rows) == 1  # No rows should be removed since there are no <worksheet> elements
            assert True
        except Exception:
            assert False

    #  XML files with <row> elements that have no <cell> elements but contain other elements
    def test_row_with_other_elements_but_no_cell_elements(self, tmp_path):
        import os
        import xml.etree.ElementTree as ET
        from remove_empty_rows import remove_empty_rows

        # Setup
        xml_content = '''<root><worksheet><row><other>data</other></row></worksheet></root>'''
        file_path = tmp_path / "test.xml"
        file_path.write_text(xml_content)

        # Execute and Verify - Should not remove the row since it contains other elements even if no <cell> elements are present.
        try:
            remove_empty_rows(tmp_path)
            tree = ET.parse(file_path)
            root = tree.getroot()
            rows = root.findall('.//row')
            assert len(rows) == 1  # The row should not be removed since it contains other elements.
            assert True
        except Exception:
            assert False

    #  Directory path is invalid or inaccessible
    def test_invalid_directory_path(self):
        from remove_empty_rows import remove_empty_rows

        # Setup - Invalid directory path
        invalid_dir_path = "/invalid/path/to/directory"

        # Execute and Verify - Should raise an exception due to invalid directory path.
        try:
            remove_empty_rows(invalid_dir_path)
            assert False  # Should not reach here as an exception is expected.
        except Exception:
            assert True  # Exception is expected.
