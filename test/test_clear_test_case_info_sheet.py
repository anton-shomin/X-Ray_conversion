
# Generated by CodiumAI

from xml_pretifier import clear_test_case_info_sheet

import pytest

class TestClearTestCaseInfoSheet:

    #  Clears "Test Case Info" sheet in all XML files within the specified directory
    def test_clears_test_case_info_sheet(self, tmpdir):
        import os
        import xml.etree.ElementTree as ET
        from clear_test_case_info_sheet import clear_test_case_info_sheet

        # Setup
        dir_path = tmpdir.mkdir("test_dir")
        xml_content = '''<root>
                            <worksheet name="Test Case Info">
                                <row><cell>Test ID</cell><cell>123</cell></row>
                                <row><cell>Test Case Purpose</cell><cell>Purpose</cell></row>
                                <row><cell>Other</cell><cell>Data</cell></row>
                            </worksheet>
                         </root>'''
        file_path = dir_path.join("test_file.xml")
        file_path.write(xml_content)

        # Execute
        clear_test_case_info_sheet(str(dir_path))

        # Verify
        tree = ET.parse(str(file_path))
        root_element = tree.getroot()
        worksheet = root_element.find(".//worksheet")
        rows = worksheet.findall("row")
        assert len(rows) == 2  # Only the rows with "Test ID" and "Test Case Purpose" should remain

    #  Returns the text of the cell next to the last found "Test ID" cell
    def test_returns_text_next_to_last_test_id_cell(self, tmpdir):
        from clear_test_case_info_sheet import clear_test_case_info_sheet

        # Setup
        dir_path = tmpdir.mkdir("test_dir")
        xml_content = '''<root>
                            <worksheet name="Test Case Info">
                                <row><cell>Test ID</cell><cell>123</cell></row>
                                <row><cell>Test ID</cell><cell>456</cell></row>
                            </worksheet>
                         </root>'''
        file_path = dir_path.join("test_file.xml")
        file_path.write(xml_content)

        # Execute
        result = clear_test_case_info_sheet(str(dir_path))

        # Verify
        assert result == "456"

    #  Traverses through all XML files in the specified directory path
    def test_traverses_all_xml_files_in_directory(self, tmpdir):
        from clear_test_case_info_sheet import clear_test_case_info_sheet

        # Setup
        dir_path = tmpdir.mkdir("test_dir")
        xml_content_1 = '''<root>
                            <worksheet name="Test Case Info">
                                <row><cell>Test ID</cell><cell>123</cell></row>
                            </worksheet>
                         </root>'''
        xml_content_2 = '''<root>
                            <worksheet name="Test Case Info">
                                <row><cell>Test ID</cell><cell>456</cell></row>
                            </worksheet>
                         </root>'''
        file_path_1 = dir_path.join("test_file_1.xml")
        file_path_2 = dir_path.join("test_file_2.xml")
        file_path_1.write(xml_content_1)
        file_path_2.write(xml_content_2)

        # Execute
        result = clear_test_case_info_sheet(str(dir_path))

        # Verify
        assert result == "456"

    #  Finds worksheets named "Test Case Info" case-insensitively
    def test_finds_worksheets_case_insensitively(self, tmpdir):
        from clear_test_case_info_sheet import clear_test_case_info_sheet

        # Setup
        dir_path = tmpdir.mkdir("test_dir")
        xml_content = '''<root>
                            <worksheet name="test case info">
                                <row><cell>Test ID</cell><cell>123</cell></row>
                            </worksheet>
                         </root>'''
        file_path = dir_path.join("test_file.xml")
        file_path.write(xml_content)

        # Execute
        result = clear_test_case_info_sheet(str(dir_path))

        # Verify
        assert result == "123"

    #  Directory path does not contain any XML files
    def test_no_xml_files_in_directory(self, tmpdir):
        from clear_test_case_info_sheet import clear_test_case_info_sheet

        # Setup
        dir_path = tmpdir.mkdir("test_dir")

        # Execute
        result = clear_test_case_info_sheet(str(dir_path))

        # Verify
        assert result == ""

    #  XML files do not contain any worksheets named "Test Case Info"
    def test_no_test_case_info_worksheets_in_xml_files(self, tmpdir):
        from clear_test_case_info_sheet import clear_test_case_info_sheet

        # Setup
        dir_path = tmpdir.mkdir("test_dir")
        xml_content = '''<root>
                            <worksheet name="Other Sheet">
                                <row><cell>Test ID</cell><cell>123</cell></row>
                            </worksheet>
                         </root>'''
        file_path = dir_path.join("test_file.xml")
        file_path.write(xml_content)

        # Execute
        result = clear_test_case_info_sheet(str(dir_path))

        # Verify
        assert result == ""

    #  Worksheets do not contain any "Test ID" or "Test Case Purpose" cells
    def test_no_test_id_or_purpose_cells_in_worksheets(self, tmpdir):
        from clear_test_case_info_sheet import clear_test_case_info_sheet

        # Setup
        dir_path = tmpdir.mkdir("test_dir")
        xml_content = '''<root>
                            <worksheet name="Test Case Info">
                                <row><cell>Other</cell><cell>Data</cell></row>
                            </worksheet>
                         </root>'''
        file_path = dir_path.join("test_file.xml")
        file_path.write(xml_content)

        # Execute
        result = clear_test_case_info_sheet(str(dir_path))

        # Verify
        assert result == ""

    #  XML files are malformed or cannot be parsed
    def test_malformed_or_unparsable_xml_files(self, tmpdir):
        from clear_test_case_info_sheet import clear_test_case_info_sheet

        # Setup
        dir_path = tmpdir.mkdir("test_dir")
        malformed_xml_content = '''<root>
                                    <worksheet name="Test Case Info">
                                        <row><cell>Test ID</cell><cell>123</cell></row>
                                    <!-- Missing closing tags for worksheet and root -->
                                 '''
        file_path = dir_path.join("malformed_file.xml")
        file_path.write(malformed_xml_content)

        # Execute and Verify
        try:
            result = clear_test_case_info_sheet(str(dir_path))
            assert False, "Expected an ET.ParseError"
        except ET.ParseError:
            pass  # Expected exception was raised
